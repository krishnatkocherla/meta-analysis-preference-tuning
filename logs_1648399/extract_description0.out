INFO 09-03 22:11:13 [__init__.py:239] Automatically detected platform cuda.
WARNING 09-03 22:11:15 [config.py:2836] Casting torch.bfloat16 to torch.float16.
INFO 09-03 22:11:24 [config.py:689] This model supports multiple tasks: {'embed', 'score', 'generate', 'classify', 'reward'}. Defaulting to 'generate'.
WARNING 09-03 22:11:24 [arg_utils.py:1592] Chunked prefill is enabled by default for models with max_model_len > 32K. Chunked prefill might not work with some features or models. If you encounter any issues, please disable by launching with --enable-chunked-prefill=False.
INFO 09-03 22:11:24 [config.py:1713] Defaulting to use mp for distributed inference
INFO 09-03 22:11:24 [config.py:1901] Chunked prefill is enabled with max_num_batched_tokens=2048.
INFO 09-03 22:11:24 [llm_engine.py:243] Initializing a V0 LLM engine (v0.8.4) with config: model='Qwen/Qwen3-8B', speculative_config=None, tokenizer='Qwen/Qwen3-8B', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=True, dtype=torch.float16, max_seq_len=40960, download_dir='/srv/nlprx-lab/share6/kkocherla3/.cache/huggingface', load_format=auto, tensor_parallel_size=4, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto,  device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar', reasoning_backend=None), observability_config=ObservabilityConfig(show_hidden_metrics=False, otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=None, served_model_name=Qwen/Qwen3-8B, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=None, chunked_prefill_enabled=True, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":[],"compile_sizes":[],"cudagraph_capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
[1;36m(VllmWorkerProcess pid=1322904)[0;0m INFO 09-03 22:11:24 [multiproc_worker_utils.py:225] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=1322907)[0;0m INFO 09-03 22:11:24 [multiproc_worker_utils.py:225] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=1322910)[0;0m INFO 09-03 22:11:24 [multiproc_worker_utils.py:225] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=1322907)[0;0m INFO 09-03 22:11:25 [cuda.py:292] Using Flash Attention backend.
INFO 09-03 22:11:25 [cuda.py:292] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=1322904)[0;0m INFO 09-03 22:11:25 [cuda.py:292] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=1322910)[0;0m INFO 09-03 22:11:25 [cuda.py:292] Using Flash Attention backend.
INFO 09-03 22:11:27 [utils.py:993] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=1322910)[0;0m INFO 09-03 22:11:27 [utils.py:993] Found nccl from library libnccl.so.2
INFO 09-03 22:11:27 [pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=1322907)[0;0m INFO 09-03 22:11:27 [utils.py:993] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=1322910)[0;0m INFO 09-03 22:11:27 [pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=1322904)[0;0m INFO 09-03 22:11:27 [utils.py:993] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=1322907)[0;0m INFO 09-03 22:11:27 [pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=1322904)[0;0m INFO 09-03 22:11:27 [pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=1322910)[0;0m WARNING 09-03 22:11:27 [custom_all_reduce.py:136] Custom allreduce is disabled because it's not supported on more than two PCIe-only GPUs. To silence this warning, specify disable_custom_all_reduce=True explicitly.
[1;36m(VllmWorkerProcess pid=1322904)[0;0m WARNING 09-03 22:11:27 [custom_all_reduce.py:136] Custom allreduce is disabled because it's not supported on more than two PCIe-only GPUs. To silence this warning, specify disable_custom_all_reduce=True explicitly.
WARNING 09-03 22:11:27 [custom_all_reduce.py:136] Custom allreduce is disabled because it's not supported on more than two PCIe-only GPUs. To silence this warning, specify disable_custom_all_reduce=True explicitly.
[1;36m(VllmWorkerProcess pid=1322907)[0;0m WARNING 09-03 22:11:27 [custom_all_reduce.py:136] Custom allreduce is disabled because it's not supported on more than two PCIe-only GPUs. To silence this warning, specify disable_custom_all_reduce=True explicitly.
INFO 09-03 22:11:27 [shm_broadcast.py:264] vLLM message queue communication handle: Handle(local_reader_ranks=[1, 2, 3], buffer_handle=(3, 4194304, 6, 'psm_ee7e86d8'), local_subscribe_addr='ipc:///tmp/0e43d4c4-3b74-4121-998e-8fac6614700c', remote_subscribe_addr=None, remote_addr_ipv6=False)
INFO 09-03 22:11:27 [parallel_state.py:959] rank 0 in world size 4 is assigned as DP rank 0, PP rank 0, TP rank 0
[1;36m(VllmWorkerProcess pid=1322910)[0;0m INFO 09-03 22:11:27 [parallel_state.py:959] rank 3 in world size 4 is assigned as DP rank 0, PP rank 0, TP rank 3
[1;36m(VllmWorkerProcess pid=1322907)[0;0m INFO 09-03 22:11:27 [parallel_state.py:959] rank 2 in world size 4 is assigned as DP rank 0, PP rank 0, TP rank 2
[1;36m(VllmWorkerProcess pid=1322904)[0;0m INFO 09-03 22:11:27 [parallel_state.py:959] rank 1 in world size 4 is assigned as DP rank 0, PP rank 0, TP rank 1
INFO 09-03 22:11:27 [model_runner.py:1110] Starting to load model Qwen/Qwen3-8B...
[1;36m(VllmWorkerProcess pid=1322904)[0;0m INFO 09-03 22:11:27 [model_runner.py:1110] Starting to load model Qwen/Qwen3-8B...
[1;36m(VllmWorkerProcess pid=1322907)[0;0m INFO 09-03 22:11:27 [model_runner.py:1110] Starting to load model Qwen/Qwen3-8B...
[1;36m(VllmWorkerProcess pid=1322910)[0;0m INFO 09-03 22:11:27 [model_runner.py:1110] Starting to load model Qwen/Qwen3-8B...
INFO 09-03 22:11:27 [weight_utils.py:265] Using model weights format ['*.safetensors']
[1;36m(VllmWorkerProcess pid=1322910)[0;0m INFO 09-03 22:11:27 [weight_utils.py:265] Using model weights format ['*.safetensors']
[1;36m(VllmWorkerProcess pid=1322904)[0;0m INFO 09-03 22:11:27 [weight_utils.py:265] Using model weights format ['*.safetensors']
[1;36m(VllmWorkerProcess pid=1322907)[0;0m INFO 09-03 22:11:27 [weight_utils.py:265] Using model weights format ['*.safetensors']
[1;36m(VllmWorkerProcess pid=1322910)[0;0m INFO 09-03 22:11:35 [loader.py:458] Loading weights took 7.43 seconds
[1;36m(VllmWorkerProcess pid=1322910)[0;0m INFO 09-03 22:11:35 [model_runner.py:1146] Model loading took 3.8244 GiB and 7.946234 seconds
INFO 09-03 22:11:36 [loader.py:458] Loading weights took 8.50 seconds
INFO 09-03 22:11:36 [model_runner.py:1146] Model loading took 3.8244 GiB and 8.946531 seconds
[1;36m(VllmWorkerProcess pid=1322907)[0;0m INFO 09-03 22:11:36 [loader.py:458] Loading weights took 8.38 seconds
[1;36m(VllmWorkerProcess pid=1322904)[0;0m INFO 09-03 22:11:36 [loader.py:458] Loading weights took 8.59 seconds
[1;36m(VllmWorkerProcess pid=1322907)[0;0m INFO 09-03 22:11:37 [model_runner.py:1146] Model loading took 3.8244 GiB and 9.291146 seconds
[1;36m(VllmWorkerProcess pid=1322904)[0;0m INFO 09-03 22:11:37 [model_runner.py:1146] Model loading took 3.8244 GiB and 9.302772 seconds
[1;36m(VllmWorkerProcess pid=1322910)[0;0m INFO 09-03 22:11:40 [worker.py:267] Memory profiling takes 3.33 seconds
[1;36m(VllmWorkerProcess pid=1322910)[0;0m INFO 09-03 22:11:40 [worker.py:267] the current vLLM instance can use total_gpu_memory (44.38GiB) x gpu_memory_utilization (0.90) = 39.95GiB
[1;36m(VllmWorkerProcess pid=1322910)[0;0m INFO 09-03 22:11:40 [worker.py:267] model weights take 3.82GiB; non_torch_memory takes 0.65GiB; PyTorch activation peak memory takes 0.12GiB; the rest of the memory reserved for KV Cache is 35.35GiB.
[1;36m(VllmWorkerProcess pid=1322907)[0;0m INFO 09-03 22:11:40 [worker.py:267] Memory profiling takes 3.33 seconds
[1;36m(VllmWorkerProcess pid=1322907)[0;0m INFO 09-03 22:11:40 [worker.py:267] the current vLLM instance can use total_gpu_memory (44.38GiB) x gpu_memory_utilization (0.90) = 39.95GiB
[1;36m(VllmWorkerProcess pid=1322907)[0;0m INFO 09-03 22:11:40 [worker.py:267] model weights take 3.82GiB; non_torch_memory takes 0.65GiB; PyTorch activation peak memory takes 0.12GiB; the rest of the memory reserved for KV Cache is 35.35GiB.
[1;36m(VllmWorkerProcess pid=1322904)[0;0m INFO 09-03 22:11:40 [worker.py:267] Memory profiling takes 3.35 seconds
[1;36m(VllmWorkerProcess pid=1322904)[0;0m INFO 09-03 22:11:40 [worker.py:267] the current vLLM instance can use total_gpu_memory (44.38GiB) x gpu_memory_utilization (0.90) = 39.95GiB
[1;36m(VllmWorkerProcess pid=1322904)[0;0m INFO 09-03 22:11:40 [worker.py:267] model weights take 3.82GiB; non_torch_memory takes 0.65GiB; PyTorch activation peak memory takes 0.12GiB; the rest of the memory reserved for KV Cache is 35.35GiB.
INFO 09-03 22:11:40 [worker.py:267] Memory profiling takes 3.36 seconds
INFO 09-03 22:11:40 [worker.py:267] the current vLLM instance can use total_gpu_memory (44.38GiB) x gpu_memory_utilization (0.90) = 39.95GiB
INFO 09-03 22:11:40 [worker.py:267] model weights take 3.82GiB; non_torch_memory takes 0.71GiB; PyTorch activation peak memory takes 1.40GiB; the rest of the memory reserved for KV Cache is 34.02GiB.
INFO 09-03 22:11:40 [executor_base.py:112] # cuda blocks: 61922, # CPU blocks: 7281
INFO 09-03 22:11:40 [executor_base.py:117] Maximum concurrency for 40960 tokens per request: 24.19x
[1;36m(VllmWorkerProcess pid=1322904)[0;0m INFO 09-03 22:11:42 [model_runner.py:1456] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 09-03 22:11:42 [model_runner.py:1456] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=1322907)[0;0m INFO 09-03 22:11:42 [model_runner.py:1456] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=1322910)[0;0m INFO 09-03 22:11:42 [model_runner.py:1456] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=1322907)[0;0m INFO 09-03 22:12:01 [model_runner.py:1598] Graph capturing finished in 19 secs, took 2.61 GiB
[1;36m(VllmWorkerProcess pid=1322904)[0;0m INFO 09-03 22:12:01 [model_runner.py:1598] Graph capturing finished in 19 secs, took 2.61 GiB
[1;36m(VllmWorkerProcess pid=1322910)[0;0m INFO 09-03 22:12:01 [model_runner.py:1598] Graph capturing finished in 19 secs, took 2.61 GiB
INFO 09-03 22:12:01 [model_runner.py:1598] Graph capturing finished in 19 secs, took 2.61 GiB
INFO 09-03 22:12:01 [llm_engine.py:449] init engine (profile, create kv cache, warmup model) took 24.46 seconds
INFO 09-03 22:31:44 [multiproc_worker_utils.py:137] Terminating local vLLM worker processes
[1;36m(VllmWorkerProcess pid=1322904)[0;0m INFO 09-03 22:31:44 [multiproc_worker_utils.py:259] Worker exiting
[1;36m(VllmWorkerProcess pid=1322910)[0;0m INFO 09-03 22:31:44 [multiproc_worker_utils.py:259] Worker exiting
[1;36m(VllmWorkerProcess pid=1322907)[0;0m INFO 09-03 22:31:44 [multiproc_worker_utils.py:259] Worker exiting
